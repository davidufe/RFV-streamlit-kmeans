# Imports
import pandas as pd
import streamlit as st
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from datetime import datetime
from PIL import Image
from io import BytesIO

# Configura√ß√£o inicial da p√°gina da aplica√ß√£o
st.set_page_config(page_title='RFV', layout="wide", initial_sidebar_state='expanded')

@st.cache_data
def convert_df(df):
    return df.to_csv(index=False).encode('utf-8')

# Fun√ß√£o para converter o df para excel
@st.cache_data
def to_excel(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='Sheet1')
    processed_data = output.getvalue()
    return processed_data

def main():
    # T√≠tulo principal da aplica√ß√£o
    st.write("""# RFV

    RFV significa rec√™ncia, frequ√™ncia, valor e √© utilizado para segmenta√ß√£o de clientes baseado no comportamento 
    de compras dos clientes e agrupa eles em clusters parecidos. Utilizando esse tipo de agrupamento podemos realizar 
    a√ß√µes de marketing e CRM melhores direcionadas, ajudando assim na personaliza√ß√£o do conte√∫do e at√© a reten√ß√£o de clientes.

    Para cada cliente √© preciso calcular cada uma das componentes abaixo:

    - Rec√™ncia (R): Quantidade de dias desde a √∫ltima compra.
    - Frequ√™ncia (F): Quantidade total de compras no per√≠odo.
    - Valor (V): Total de dinheiro gasto nas compras do per√≠odo.

    E √© isso que iremos fazer abaixo. Utilizando o m√©todo de agrupamento K-Means, vamos rankear os clientes em A, B, C e D.
    """)
    st.markdown("---")

    # Apresenta a imagem na barra lateral da aplica√ß√£o
    # image = Image.open("Bank-Branding.jpg")
    # st.sidebar.image(image)

    # Bot√£o para carregar arquivo na aplica√ß√£o
    st.sidebar.write("## Suba o arquivo")
    data_file_1 = st.sidebar.file_uploader("Bank marketing data", type=['csv', 'xlsx'])

    # Verifica se h√° conte√∫do carregado na aplica√ß√£o
    if data_file_1 is not None:
        df_compras = pd.read_csv(data_file_1, infer_datetime_format=True, parse_dates=['DiaCompra'])

        st.write('## Rec√™ncia (R)')
        dia_atual = df_compras['DiaCompra'].max()
        st.write('Dia m√°ximo na base de dados: ', dia_atual)
        st.write('Quantos dias faz que o cliente fez a sua √∫ltima compra?')

        df_recencia = df_compras.groupby(by='ID_cliente', as_index=False)['DiaCompra'].max()
        df_recencia.columns = ['ID_cliente', 'DiaUltimaCompra']
        df_recencia['Recencia'] = df_recencia['DiaUltimaCompra'].apply(lambda x: (dia_atual - x).days)
        st.write(df_recencia.head())
        df_recencia.drop('DiaUltimaCompra', axis=1, inplace=True)

        st.write('## Frequ√™ncia (F)')
        st.write('Quantas vezes cada cliente comprou com a gente?')
        df_frequencia = df_compras[['ID_cliente', 'CodigoCompra']].groupby('ID_cliente').count().reset_index()
        df_frequencia.columns = ['ID_cliente', 'Frequencia']
        st.write(df_frequencia.head())

        st.write('## Valor (V)')
        st.write('Quanto que cada cliente gastou no periodo?')
        df_valor = df_compras[['ID_cliente', 'ValorTotal']].groupby('ID_cliente').sum().reset_index()
        df_valor.columns = ['ID_cliente', 'Valor']
        st.write(df_valor.head())

        st.write('## Tabela RFV final')
        df_RF = df_recencia.merge(df_frequencia, on='ID_cliente')
        df_RFV = df_RF.merge(df_valor, on='ID_cliente')
        df_RFV.set_index('ID_cliente', inplace=True)
        st.write(df_RFV.head())

        st.write('## Segmenta√ß√£o por k-means utilizando o RFV')
        # Padronizando a base
        df_RFV_pad = pd.DataFrame(StandardScaler().fit_transform(df_RFV), columns=df_RFV.columns, index=df_RFV.index)

        # Clusterizando em 4 Grupos
        cluster = KMeans(n_clusters=4, random_state=10)
        cluster.fit(df_RFV_pad)

        # Adicionando ao DataFrame as Categorias
        df_RFV['RFV_score'] = pd.Categorical(cluster.labels_).rename_categories({0: 'C', 1: 'A', 2: 'B', 3: 'D'})

        st.write('Tabela ap√≥s a cria√ß√£o dos grupos')
        st.write(df_RFV.head())

        # Exibindo as m√©dias por grupo
        st.write('M√©dia dos grupos por RFV_score:')
        st.write(df_RFV.groupby('RFV_score').agg(['mean']))

        st.write('Analisando os Clusters, podemos ver que o grupo A √© o melhor grupo, seguidos pelos grupos B, C e D.')

        st.write('Quantidade de clientes por grupos')
        st.write(df_RFV['RFV_score'].value_counts())

        st.write('#### Clientes com menor rec√™ncia, maior frequ√™ncia e maior valor gasto')
        st.write(df_RFV[df_RFV['RFV_score'] == 'A'].sort_values('Valor', ascending=False).head(10))

        st.write('### A√ß√µes de marketing/CRM')

        dict_acoes = {
            'A': 'Enviar cupons de desconto, Pedir para indicar nosso produto pra algum amigo, Ao lan√ßar um novo produto enviar amostras gr√°tis pra esses.',
            'D': 'Churn! clientes que gastaram bem pouco e fizeram poucas compras, fazer nada',
            'B': 'Churn! clientes que gastaram bastante e fizeram muitas compras, enviar cupons de desconto para tentar recuperar',
            'C': 'Churn! clientes que gastaram bastante e fizeram muitas compras, enviar cupons de desconto para tentar recuperar'
        }

        df_RFV['acoes de marketing/crm'] = df_RFV['RFV_score'].map(dict_acoes)
        st.write(df_RFV.head())

        df_xlsx = to_excel(df_RFV)
        st.download_button(label='üì• Download', data=df_xlsx, file_name='RFV_.xlsx')

        st.write('Quantidade de clientes por tipo de a√ß√£o')
        st.write(df_RFV['acoes de marketing/crm'].value_counts(dropna=False))

if __name__ == '__main__':
    main()

